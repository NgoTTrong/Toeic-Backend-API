generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id
  createdAt        DateTime           @default(now())
  email            String?
  name             String?
  phone            String?
  avatar           String?
  rankId           String?
  active           Active             @default(ACTIVE)
  address          String?
  commentExams     CommentExam[]
  commentFeeds     CommentFeed[]
  Feed             Feed[]
  likeCommentExams LikeCommentExam[]
  likeCommentFeeds LikeCommentFeed[]
  likeExams        LikeExam[]
  likeFeeds        LikeFeed[]
  notifications    NotificationUser[]
  Part1            Part1[]
  Payment          Payment[]
  rank             Rank?              @relation(fields: [rankId], references: [id])

  @@index([id, email])
}

model Rank {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  description String?
  rankIcon    String
  users       User[]

  @@index([id])
}

model Notification {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now())
  title         String
  content       String
  notifications NotificationUser[]

  @@index([id])
}

model NotificationUser {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  userId         String
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
}

model Feed {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now())
  title      String
  content    String
  thumbnail  String
  categoryId String?
  active     Active        @default(ACTIVE)
  userId     String
  comments   CommentFeed[]
  category   FeedCategory? @relation(fields: [categoryId], references: [id])
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes      LikeFeed[]

  @@index([id])
}

model FeedCategory {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  name       String
  color      String
  background String
  feeds      Feed[]

  @@index([id])
}

model LikeFeed {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  feedId    String
  feed      Feed     @relation(fields: [feedId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([feedId])
}

model CommentFeed {
  id            String            @id @default(uuid())
  createdAt     DateTime          @default(now())
  userId        String
  feedId        String
  content       String
  parentId      String?
  feed          Feed              @relation(fields: [feedId], references: [id], onDelete: Cascade)
  parentComment CommentFeed?      @relation("ParentCommentFeed", fields: [parentId], references: [id], onDelete: Cascade)
  childComments CommentFeed[]     @relation("ParentCommentFeed")
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         LikeCommentFeed[]

  @@index([feedId])
  @@index([parentId])
}

model LikeCommentFeed {
  id        String      @id @default(uuid())
  commentId String
  userId    String
  comment   CommentFeed @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exam {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  audioUrl     String
  breakPoints  Int[]
  thumbnail    String
  categoryId   String?
  part1Id      String
  part2Id      String
  part3Id      String
  part4Id      String
  part5Id      String
  part6Id      String
  part7Id      String
  duration     Int
  introduction String
  numOfParts   Int
  title        String
  comments     CommentExam[]
  category     ExamCategory? @relation(fields: [categoryId], references: [id])
  part1        Part1         @relation(fields: [part1Id], references: [id])
  part2        Part2         @relation(fields: [part2Id], references: [id])
  part3        Part3         @relation(fields: [part3Id], references: [id])
  part4        Part4         @relation(fields: [part4Id], references: [id])
  part5        Part5         @relation(fields: [part5Id], references: [id])
  part6        Part6         @relation(fields: [part6Id], references: [id])
  part7        Part7         @relation(fields: [part7Id], references: [id])
  likes        LikeExam[]

  @@index([id])
}

model ExamCategory {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  name       String
  color      String
  background String
  exams      Exam[]

  @@index([id])
}

model LikeExam {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([examId])
}

model CommentExam {
  id            String            @id @default(uuid())
  userId        String
  examId        String
  content       String
  parentId      String?
  exam          Exam              @relation(fields: [examId], references: [id], onDelete: Cascade)
  parentComment CommentExam?      @relation("ParentCommentExam", fields: [parentId], references: [id], onDelete: Cascade)
  childComments CommentExam[]     @relation("ParentCommentExam")
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         LikeCommentExam[]

  @@index([examId])
}

model LikeCommentExam {
  id        String      @id @default(uuid())
  commentId String
  userId    String
  comment   CommentExam @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Part1 {
  id             String          @id @default(uuid())
  thumbnail      String?
  creatorId      String?
  duration       Int?
  introduction   String?
  numOfQuestions Int?
  title          String?
  exams          Exam[]
  creator        User?           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  part1Questions Part1Question[]

  @@index([id])
}

model Part1Question {
  id         String   @id @default(uuid())
  audioUrl   String
  imageUrls  String[]
  questionId String
  part1Id    String
  explainId  String?  @unique
  topicId    String?  @unique
  explain    Explain? @relation(fields: [explainId], references: [id])
  part1      Part1    @relation(fields: [part1Id], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  topic      Topic?   @relation(fields: [topicId], references: [id])

  @@index([id, part1Id])
}

model Part2 {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  thumbnail      String
  duration       Int?
  introduction   String
  numOfQuestions Int
  exams          Exam[]
  part2Questions Part2Question[]

  @@index([id])
}

model Part2Question {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  audioUrl   String
  questionId String
  part2Id    String
  explainId  String?  @unique
  topicId    String?  @unique
  explain    Explain? @relation(fields: [explainId], references: [id])
  part2      Part2    @relation(fields: [part2Id], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  topic      Topic?   @relation(fields: [topicId], references: [id])

  @@index([id, part2Id])
}

model Part3 {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  thumbnail      String
  duration       Int?
  introduction   String
  numOfQuestions Int
  exams          Exam[]
  part3Questions Part3Question[]

  @@index([id])
}

model Part3Question {
  id                  String                 @id @default(uuid())
  createdAt           DateTime               @default(now())
  audioUrl            String
  imageUrls           String[]
  part3Id             String
  explainId           String?                @unique
  topicId             String?                @unique
  groupPart3Questions MappingPart3Question[]
  explain             Explain?               @relation(fields: [explainId], references: [id])
  part3               Part3                  @relation(fields: [part3Id], references: [id])
  topic               Topic?                 @relation(fields: [topicId], references: [id])

  @@index([id, part3Id])
}

model MappingPart3Question {
  part3QuestionId String
  questionId      String
  part3Question   Part3Question @relation(fields: [part3QuestionId], references: [id])
  question        Question      @relation(fields: [questionId], references: [id])

  @@id([part3QuestionId, questionId])
  @@index([part3QuestionId, questionId])
}

model Part4 {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  thumbnail      String
  duration       Int?
  introduction   String
  numOfQuestions Int
  exams          Exam[]
  part4Questions Part4Question[]

  @@index([id])
}

model Part4Question {
  id                  String                 @id @default(uuid())
  createdAt           DateTime               @default(now())
  audioUrl            String
  imageUrls           String[]
  part4Id             String
  explainId           String?                @unique
  topicId             String?                @unique
  groupPart4Questions MappingPart4Question[]
  explain             Explain?               @relation(fields: [explainId], references: [id])
  part4               Part4                  @relation(fields: [part4Id], references: [id])
  topic               Topic?                 @relation(fields: [topicId], references: [id])

  @@index([id, part4Id])
}

model MappingPart4Question {
  part4QuestionId String
  questionId      String
  part4Question   Part4Question @relation(fields: [part4QuestionId], references: [id])
  question        Question      @relation(fields: [questionId], references: [id])

  @@id([questionId, part4QuestionId])
  @@index([part4QuestionId, questionId])
}

model Part5 {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  thumbnail      String
  duration       Int?
  introduction   String
  numOfQuestions Int
  exams          Exam[]
  part5Questions Part5Question[]

  @@index([id])
}

model Part5Question {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  part5Id    String
  questionId String
  explainId  String?  @unique
  topicId    String?  @unique
  explain    Explain? @relation(fields: [explainId], references: [id])
  part5      Part5    @relation(fields: [part5Id], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  topic      Topic?   @relation(fields: [topicId], references: [id])

  @@index([part5Id, questionId])
}

model Part6 {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  thumbnail      String
  duration       Int?
  introduction   String
  numOfQuestions Int
  exams          Exam[]
  part6Questions Part6Question[]

  @@index([id])
}

model Part6Question {
  id                  String                 @id @default(uuid())
  createdAt           DateTime               @default(now())
  imageUrls           String[]
  part6Id             String
  explainId           String?                @unique
  topicId             String?                @unique
  groupPart6Questions MappingPart6Question[]
  explain             Explain?               @relation(fields: [explainId], references: [id])
  part6               Part6                  @relation(fields: [part6Id], references: [id])
  topic               Topic?                 @relation(fields: [topicId], references: [id])

  @@index([id, part6Id])
}

model MappingPart6Question {
  part6QuestionId String
  questionId      String
  part6Question   Part6Question @relation(fields: [part6QuestionId], references: [id])
  question        Question      @relation(fields: [questionId], references: [id])

  @@id([part6QuestionId, questionId])
  @@index([questionId, part6QuestionId])
}

model Part7 {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  thumbnail      String
  duration       Int?
  introduction   String
  numOfQuestions Int
  exams          Exam[]
  part7Question  Part7Question[]

  @@index([id])
}

model Part7Question {
  id                  String                 @id @default(uuid())
  createdAt           DateTime               @default(now())
  imageUrls           String[]
  part7Id             String
  explainId           String?                @unique
  topicId             String?                @unique
  groupPart7Questions MappingPart7Question[]
  explain             Explain?               @relation(fields: [explainId], references: [id])
  part7               Part7                  @relation(fields: [part7Id], references: [id])
  topic               Topic?                 @relation(fields: [topicId], references: [id])

  @@index([id, part7Id])
}

model MappingPart7Question {
  part7QuestionId String
  questionId      String
  part7Question   Part7Question @relation(fields: [part7QuestionId], references: [id])
  question        Question      @relation(fields: [questionId], references: [id])

  @@id([part7QuestionId, questionId])
  @@index([part7QuestionId, questionId])
}

model Question {
  id             String                 @id @default(uuid())
  createdAt      DateTime               @default(now())
  content        String
  optionA        String?
  optionB        String?
  optionC        String?
  optionD        String?
  part3Questions MappingPart3Question[]
  part4Questions MappingPart4Question[]
  part6Questions MappingPart6Question[]
  part7Questions MappingPart7Question[]
  part1Questions Part1Question[]
  part2Questions Part2Question[]
  part5Questions Part5Question[]

  @@index([id])
}

model Topic {
  id            String         @id @default(uuid())
  name          String
  Part1Question Part1Question?
  Part2Question Part2Question?
  Part3Question Part3Question?
  Part4Question Part4Question?
  Part5Question Part5Question?
  Part6Question Part6Question?
  Part7Question Part7Question?

  @@index([id])
}

model Explain {
  id            String         @id @default(uuid())
  explain       String
  images        String[]
  answer        Answer
  Part1Question Part1Question?
  Part2Question Part2Question?
  Part3Question Part3Question?
  Part4Question Part4Question?
  Part5Question Part5Question?
  Part6Question Part6Question?
  Part7Question Part7Question?

  @@index([id])
}

model Course {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean         @default(false)
  categoryId  String?
  attachments Attachment[]
  chapters    Chapter[]
  category    CourseCategory? @relation(fields: [categoryId], references: [id])
  payment     Payment[]

  @@index([categoryId])
}

model Attachment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  url       String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model CourseCategory {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Chapter {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([courseId])
}

model Payment {
  id       String @id @default(uuid())
  userId   String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model UserProgress {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isCompleted Boolean  @default(false)
  chapterId   String
  userId      String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

enum Answer {
  A
  B
  C
  D
}

enum Active {
  ACTIVE
  INACTIVE
}
